
Header file of the program:
const char* keyword[] = { "auto","break","case","char","const","continue","default","do","double","else","enum","extern","float","for","goto","if","int","long","register","return","short","signed","sizeof","static","struct","switch","typedef","union","unsigned","void","volatile","while" };

const char punctuation[] = ".,!?";



Source file of the program: 

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>
#include "def.h"
char all[10000];
//Reads the entire contents of the file into a string
void getfileall(char* fname)
{
    // Open file
    FILE* fp1;
    if ((fp1 = fopen(fname, "r")) == NULL) {
        // If can not open
        printf("FILE OPEN WRONG!");
        exit(0);
    }
    // Store a row temporarily with a temporary string
    char txt[1000];
    // Initializes the read string
    all[0] = 0;
    while ((fgets(txt, 1000, fp1)) != NULL) {//Read 1000 bytes in a loop and exit if there is no data
        strcat(all, txt); // Concatenate a string
    }
    fclose(fp1);
}
// Check for punctuation
int check_punctuation(char c) {
    for (int i = 0; i < 4; i++) {
        if (c == punctuation[i]) {
            return 1;
        }
    }
    return 0;
}
int main() {
    int cnt = 0; // Total line counter
    char filename[255] = "assignment1.txt";
    printf("file name:");
    scanf("%s", filename);
    getfileall(filename);
    FILE* fp2;
    if ((fp2 = fopen("C:\\Users\\61097\\Desktop\\new.txt", "w"))== NULL) {
        printf("file open wrong");
        exit(0);
    }
    // Split the contents of the file with Spaces
    char* word = strtok(all, " ");
    int last = 1;
    while (word != NULL) {
        int flag = 0;
        // Check if it contains a keyword or if it has a keyword followed by punctuation.
        for (int i = 0; i < 32; i++) {
            int l = strlen(keyword[i]);
            char* subs = strstr(word, keyword[i]);
            if (subs != NULL && (check_punctuation(word[l]) || word[l] == '\0')) {
                flag = 1;
            }
        }
        int len = strlen(word);
        if (flag == 1 && last == 0) {
            printf("\n");
            fprintf(fp2, "\n");
            cnt++;
        }
        printf("%s", word);
        fprintf(fp2, "%s", word);
        if ((flag == 0 && check_punctuation(word[len - 1])) || flag == 1) {
            // If there are no keywords, only punctuation marks
            cnt++;
            printf("\n");
            fprintf(fp2,"\n");
            last = 1;
        }
        else {
            // No keywords, no punctuation, no line breaks
            printf(" ");
            fprintf(fp2," ");
            last = 0;
        }
        // The usage of strtok
        word = strtok(NULL, " ");
    }
    printf("Total number of lines is: %d\n", cnt);
    fprintf(fp2,"Total number of lines is %d\n", cnt);
    rewind(fp2);
    fclose(fp2);
    return 0;
}
